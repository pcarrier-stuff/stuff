#!/usr/bin/env python

# Terminal locker relying on a PIN file to avoid PAM/setuid
#
# THIS IS A PROTOTYPE.
# Don't expect a quickly hacked Python script to be resilient.
#
# Copyright (c) 2011, Pierre Carrier <pierre@gcarrier.fr>
# Permission to use, copy, modify, and/or distribute this software
# for any purpose with or without fee is hereby granted, provided that
# the above copyright notice and this permission notice appear in all copies.
#
# TODO: A C version that
# 1) Uses pam, of course (SUID somewhere)
# 2) Traps more signals (SIGTTIN and SIGTTOUT :)
# 3) Handles all errors no matter what (worst case notify & discard)

from getopt import getopt, GetoptError
from getpass import getpass
from hashlib import sha256
from os import getuid, stat, chmod, isatty, ttyname, kill, getppid
from os.path import join, isfile, exists
from pwd import getpwnam, getpwuid
from signal import signal, SIG_IGN, SIGSTOP
# blocked signals
from signal import SIGTSTP, SIGQUIT, SIGINT, SIGCONT, SIGILL, \
                   SIGTRAP, SIGABRT, SIGFPE, SIGBUS, SIGSEGV, \
                   SIGSYS, SIGPIPE, SIGALRM, SIGTERM, \
                   SIGXCPU, SIGXFSZ, SIGVTALRM, SIGPROF, \
                   SIGUSR1, SIGUSR2
from socket import gethostname
from sys import stdout, stderr, argv, exit
from termios import tcgetattr, tcsetattr, ISIG, TCSANOW
from time import sleep

def block_everything(blocking):
  """If blocking, make sure we drop signals, and keep the tty blocked if crash; if not undo"""
  if blocking:
    # Just in case
    for sig_number in (SIGTSTP, SIGQUIT, SIGINT, SIGCONT, SIGILL, \
                       SIGTRAP, SIGABRT, SIGFPE, SIGBUS, SIGSEGV, \
                       SIGSYS, SIGPIPE, SIGALRM, SIGTERM, \
                       SIGXCPU, SIGXFSZ, SIGVTALRM, SIGPROF, \
                       SIGUSR1, SIGUSR2):
      signal(sig_number, SIG_IGN)
  attrs = tcgetattr(stdout.fileno())
  if blocking:
    attrs[3] &= ~ISIG
  else:
    attrs[3] |= ISIG
  tcsetattr(stdout.fileno(), TCSANOW, attrs)
  if blocking:
    kill(getppid(), SIGSTOP)
  else:
    kill(getppid(), SIGCONT)

def get_pin(pw):
  return getpass('%s@%s locked by %s. PIN? ' % (gethostname(), ttyname(stdout.fileno()), pw.pw_name))

def pin_path(pw):
  return join(pw.pw_dir, '.pinlock')
  
def read_pinhash(pw):
  pinfilename = pin_path(pw)
  if not exists(pinfilename):
    print >> stderr, 'No pin file (%s) found. Let\'s create one!' % pinfilename
    block_everything(False)
    set_pin(pw)
    exit(0)
  if not isfile(pinfilename):
    print >> stderr, "%s is not a file" % pw_file
    exit(2)
  if stat(pinfilename).st_mode & 077:
    print >> stderr, 'You shouldn\'t allow anyone else but you to do anything with %s. please "chmod go= %s"' % (pinfilename, pinfilename)
    exit(3)
  try:
    return(open(pinfilename, 'r').read().strip())
  except:
    print >> stderr, 'Couldn\'t read the pin file, %s' % pinfilename
    exit(4)

def set_pin(pw):
  pin  = getpass('Please enter the desired PIN: ')
  pin_confirm = getpass('Please confirm the desired PIN: ')
  if pin != pin_confirm:
    print >> stderr, 'The PINs differ!'
    exit(5)
  pinfilename = pin_path(pw)
  try:
    pinfile = open(pinfilename, 'w')
    pinfile.write(sha256(pin).hexdigest())
    pinfile.close()
  except:
    print >> stderr, 'Could not write in %s' % pinfilename
    exit(6)
  try:
    chmod(pinfilename, stat(pinfilename).st_mode & ~077)
  except:
    print >> stderr, 'Could not update the permissions of %s' % pinfilename
  exit(0)

def usage(pw):
  print """Usage: %s [-h] [-i] [-c]
  -h for this help
  -i for in-place input (no fullscreen)
  -c to change the password
The PIN in hashed with SHA256 and stored in %s""" % (argv[0], pin_path(pw))

def main():
  pw = getpwuid(getuid())
  fullscreen = True
  try:
    opts, args = getopt(argv[1:], 'chi')
  except GetoptError, err:
    print >> stderr, str(err)
    usage(pw)
    exit(7)
  for opt, value in opts:
    if opt == '-h':
      usage(pw)
      exit(0)
    elif opt == '-c':
      set_pin(pw)
    elif opt == '-i':
      fullscreen = False

  if not isatty(stdout.fileno()):
    print >> stderr, 'Not a tty'
    exit(8)

  # We'll be enforcing a password
  block_everything(True)
  password = None
  pinhash = read_pinhash(pw)

  if fullscreen:
    from curses import setupterm, tigetstr
    setupterm()
    print tigetstr("smcup"),
    stdout.flush()

  password = get_pin(pw)
  sleep_time = 1.0
  while sha256(password).hexdigest() != pinhash:
    print >> stderr, 'Incorrect password! Please wait for %gs.' % sleep_time
    sleep(sleep_time)
    sleep_time *= 2
    password = get_pin(pw)

  if fullscreen:
    print tigetstr("rmcup"),
    stdout.flush()
  block_everything(False)

if __name__ == "__main__":
  main()
